#!/usr/bin/env node

const { program } = require('commander');
const chalk = require('chalk');
const path = require('path');
const os = require('os');
const fs = require('fs-extra');

const { Orchestrator } = require('../src/core/orchestrator');
const { Reporter } = require('../src/utils/reporter');
const { Validator } = require('../src/utils/validator');
// const { TaskDescriptor } = require('../src/core/task-descriptor'); // Not needed with Claude
const spinner = require('../src/utils/spinner');
const packageJson = require('../package.json');

// File-scoped logging methods
const log = {
  info: (message) => console.log(chalk.blue(message)),
  success: (message) => console.log(chalk.green(message)),
  error: (message) => console.error(chalk.red(message)),
  warn: (message) => console.log(chalk.yellow(message)),
  detail: (message) => console.log(chalk.cyan(message)),
  plain: (message) => console.log(message),
  json: (data) => console.log(JSON.stringify(data, null, 2)),
  divider: (length = 50) => console.log(chalk.gray('‚îÄ'.repeat(length))),
  errorWithDetail: (prefix, error) => console.error(chalk.red(prefix), error.message),
  statusMessage: (label, value) => console.log(`${label}: ${value}`),
  listItem: (index, message) => console.log(`  ${index}. ${message}`),
  heading: (title) => {
    console.log(chalk.blue(title));
    console.log(chalk.gray('‚îÄ'.repeat(50)));
  }
};

program
  .name('nightly-code')
  .description('Automated 8-hour coding sessions using Claude Code')
  .version(packageJson.version);

program
  .command('init')
  .description('Initialize configuration in current repository')
  .option('-f, --force', 'Overwrite existing configuration')
  .option('-t, --template <type>', 'Use predefined template (node, python, go)', 'node')
  .option('--superclaude', 'Enable SuperClaude Framework integration')
  .action(async (options) => {
    try {
      const configPath = path.join(process.cwd(), 'nightly-code.yaml');
      const tasksPath = path.join(process.cwd(), 'nightly-tasks.yaml');

      // Check for existing configuration
      if (!options.force && (await fs.pathExists(configPath) || await fs.pathExists(tasksPath))) {
        log.error('Configuration already exists. Use --force to overwrite.');
        process.exit(1);
      }

      // Initialize with spinner
      await spinner.execute(
        'Initializing Nightly Code configuration...',
        async () => {
          const templateDir = path.join(__dirname, '..', 'templates');
          await fs.copy(path.join(templateDir, 'session-config.yaml'), configPath);
          await fs.copy(path.join(templateDir, 'task-template.yaml'), tasksPath);

          // Add SuperClaude configuration if requested
          if (options.superclaude) {
            spinner.update('Configuring SuperClaude integration...');
            const YAML = require('yaml');
            const configContent = await fs.readFile(configPath, 'utf8');
            const config = YAML.parse(configContent);

            config.superclaude = {
              enabled: true,
              planning_mode: 'intelligent',
              execution_mode: 'assisted',
              task_management: 'hierarchical',
              integration_level: 'deep'
            };

            await fs.writeFile(configPath, YAML.stringify(config));
          }
        },
        {
          successText: '‚úÖ Configuration initialized successfully!'
        }
      );

      log.warn(`üìù Edit ${configPath} and ${tasksPath} to customize your setup`);

      if (options.superclaude) {
        log.detail('üß† SuperClaude Framework features:');
        log.detail('   - Intelligent task planning with slash commands');
        log.detail('   - Advanced orchestration and execution strategies');
        log.detail('   - Deep integration with nightly workflow');
        log.detail('   - Uses global SuperClaude commands (no local commands_path required)');
      }
    } catch (error) {
      log.errorWithDetail('‚ùå Initialization failed:', error);
      process.exit(1);
    }
  });

program
  .command('schedule')
  .description('Set up automated scheduling (cron/Task Scheduler)')
  .option('-c, --cron <expression>', 'Cron expression for scheduling', '0 22 * * *')
  .option('-t, --timezone <tz>', 'Timezone for scheduling', 'UTC')
  .option('--dry-run', 'Show what would be scheduled without creating it')
  .action(async (options) => {
    try {
      log.info('‚è∞ Setting up automated scheduling...');

      const setupScript = require('../scripts/setup-cron');
      await setupScript.configure({
        cron: options.cron,
        timezone: options.timezone,
        dryRun: options.dryRun
      });

      if (!options.dryRun) {
        log.success('‚úÖ Scheduling configured successfully!');
        log.warn(`Next run: ${options.cron} (${options.timezone})`);
      }
    } catch (error) {
      log.errorWithDetail('‚ùå Scheduling setup failed:', error);
      process.exit(1);
    }
  });

program
  .command('run')
  .description('Execute a single coding session manually')
  .option('-c, --config <path>', 'Path to configuration file', 'nightly-code.yaml')
  .option('-t, --tasks <path>', 'Path to tasks file', 'nightly-tasks.yaml')
  .option('--max-duration <minutes>', 'Maximum session duration in minutes', '480')
  .option('--dry-run', 'Validate configuration without executing')
  .option('--resume <checkpoint>', 'Resume from checkpoint')
  .option('--superclaude', 'Enable SuperClaude prompt optimization (overrides config)')
  .option('--session-pr', 'Use session-based PR strategy (one PR for all tasks)')
  .option('--task-pr', 'Use task-based PR strategy (one PR per task) - default')
  .action(async (options) => {
    try {
      // Determine PR strategy from CLI flags
      let prStrategy;
      if (options.sessionPr) {
        prStrategy = 'session';
      } else if (options.taskPr) {
        prStrategy = 'task';
      }

      const orchestrator = new Orchestrator({
        configPath: options.config,
        tasksPath: options.tasks,
        maxDuration: parseInt(options.maxDuration) * 60, // Convert to seconds
        dryRun: options.dryRun,
        resumeCheckpoint: options.resume,
        forceSuperclaude: options.superclaude, // CLI flag overrides config
        prStrategy // Pass PR strategy if specified
      });

      const sessionType = options.dryRun ? 'dry-run validation' : 'coding session';

      // Enable quiet mode since orchestrator uses pretty logger
      spinner.setQuietMode(true);

      const result = await spinner.execute(
        `Starting ${sessionType}...`,
        orchestrator.run(),
        {
          successText: options.dryRun ? '‚úÖ Validation completed successfully!' : '‚úÖ Session completed successfully!'
        }
      );

      if (result.success) {
        log.info(`üìä Completed ${result.completedTasks}/${result.totalTasks} tasks`);
        log.info(`‚è±Ô∏è  Duration: ${Math.round(result.duration / 60000)} minutes`);
      } else {
        log.warn('‚ö†Ô∏è  Session completed with issues');
        log.error(`‚ùå Errors: ${result.errors.length}`);
      }
    } catch (error) {
      log.errorWithDetail('‚ùå Session failed:', error);
      process.exit(1);
    }
  });

program
  .command('status')
  .description('Check last session results')
  .option('-v, --verbose', 'Show detailed status information')
  .option('--json', 'Output in JSON format')
  .action(async (options) => {
    try {
      const reporter = new Reporter();
      const status = await spinner.execute(
        'Retrieving session status...',
        reporter.getLastSessionStatus(),
        {
          successText: 'üìä Status retrieved successfully'
        }
      );

      if (options.json) {
        log.json(status);
        return;
      }

      log.heading('üìä Last Session Status');

      if (!status) {
        log.warn('No previous sessions found');
        return;
      }

      log.statusMessage('Status', status.success ? chalk.green('‚úÖ Success') : chalk.red('‚ùå Failed'));
      log.statusMessage('Date', chalk.cyan(new Date(status.timestamp).toLocaleString()));
      log.statusMessage('Duration', `${chalk.cyan(Math.round(status.duration / 60))} minutes`);
      log.statusMessage('Tasks', `${chalk.cyan(status.completedTasks)}/${chalk.cyan(status.totalTasks)} completed`);

      if (options.verbose && status.errors?.length > 0) {
        log.plain(`\n${chalk.red('Errors:')}`);
        status.errors.forEach((error, i) => {
          log.listItem(i + 1, error);
        });
      }
    } catch (error) {
      log.errorWithDetail('‚ùå Failed to get status:', error);
      process.exit(1);
    }
  });

program
  .command('config')
  .description('Manage configuration interactively')
  .option('-l, --list', 'List current configuration')
  .option('-e, --edit', 'Edit configuration interactively')
  .option('-v, --validate', 'Validate current configuration')
  .action(async (options) => {
    try {
      const validator = new Validator();

      if (options.list) {
        const config = await validator.loadConfig();
        log.heading('Current Configuration:');
        log.json(config);
        return;
      }

      if (options.validate) {
        const validation = await validator.validateAll();
        if (validation.valid) {
          log.success('‚úÖ Configuration is valid');
        } else {
          log.error('‚ùå Configuration has errors:');
          validation.errors.forEach(error => log.plain(`  - ${error}`));
          process.exit(1);
        }
        return;
      }

      if (options.edit) {
        log.info('üîß Interactive Configuration Editor');
        // Interactive configuration editing would go here
        log.warn('Interactive editing not yet implemented');
        return;
      }

      // Default action - show help
      program.commands.find(cmd => cmd.name() === 'config').help();
    } catch (error) {
      log.errorWithDetail('‚ùå Configuration management failed:', error);
      process.exit(1);
    }
  });

program
  .command('validate')
  .description('Validate current configuration')
  .option('-c, --config <path>', 'Path to configuration file', 'nightly-code.yaml')
  .option('-t, --tasks <path>', 'Path to tasks file', 'nightly-tasks.yaml')
  .option('--fix', 'Attempt to fix common issues')
  .action(async (options) => {
    try {
      const validator = new Validator({
        configPath: options.config,
        tasksPath: options.tasks
      });

      // Enable quiet mode to work with pretty logger
      spinner.setQuietMode(true);

      const result = await spinner.execute(
        'Validating configuration...',
        validator.validateAll(),
        {
          successText: '‚úÖ All validations passed!'
        }
      );

      if (!result.valid) {
        spinner.fail('‚ùå Validation failed');
        result.errors.forEach(error => {
          log.plain(`  - ${error.message} (${error.path})`);
        });

        if (options.fix) {
          const fixResult = await spinner.execute(
            'Attempting to fix issues...',
            validator.attemptFix(result.errors),
            {
              successText: `‚úÖ Fixed ${result.fixed || 0} issues`
            }
          );

          if (fixResult.remaining > 0) {
            log.warn(`‚ö†Ô∏è  ${fixResult.remaining} issues require manual intervention`);
          }
        }

        process.exit(result.errors.length);
      }
    } catch (error) {
      log.errorWithDetail('‚ùå Validation failed:', error);
      process.exit(1);
    }
  });

program
  .command('report')
  .description('View session reports')
  .argument('[date]', 'Date for report (YYYY-MM-DD)', new Date().toISOString().split('T')[0])
  .option('-f, --format <type>', 'Output format (json, markdown, table)', 'table')
  .option('-o, --output <file>', 'Output file path')
  .option('--last <count>', 'Show last N sessions', '10')
  .action(async (date, options) => {
    try {
      log.info(`üìà Generating report for ${date}...`);

      const reporter = new Reporter();
      const report = await reporter.generateReport({
        date,
        format: options.format,
        last: parseInt(options.last)
      });

      if (options.output) {
        await fs.writeFile(options.output, report);
        log.success(`‚úÖ Report saved to ${options.output}`);
      } else {
        log.plain(report);
      }
    } catch (error) {
      log.errorWithDetail('‚ùå Report generation failed:', error);
      process.exit(1);
    }
  });

program
  .command('describe')
  .description('Use Claude to generate well-formatted nightly-tasks.yaml from natural language descriptions')
  .option('-o, --output <file>', 'Output file path', 'nightly-tasks.yaml')
  .option('-i, --interactive', 'Interactive mode for entering multiple tasks')
  .option('-f, --file <path>', 'Read descriptions from a text file')
  .option('--append', 'Append to existing tasks file instead of overwriting')
  .option('-n, --count <number>', 'Desired number of output tasks (Claude will split/merge as needed)')
  .option('--dry-run', 'Preview generated tasks without writing to file')
  .action(async (options) => {
    try {
      log.info('üìù Claude-Powered Task Description Mode');
      log.plain(chalk.gray(
        'Describe your tasks in natural language. Claude will generate a well-formatted nightly-tasks.yaml file.\n'
      ));

      // Check for Claude Code installation
      const { execSync } = require('child_process');
      try {
        execSync('which claude', { stdio: 'ignore' });
      } catch (error) {
        log.error('Claude Code CLI not found. Please install it first:');
        log.plain(chalk.gray('  npm install -g claude-code'));
        process.exit(1);
      }

      const { input, editor, confirm } = require('@inquirer/prompts');
      let descriptions = [];

      if (options.file) {
        // Read descriptions from file
        const content = await fs.readFile(options.file, 'utf8');
        descriptions = content.split('\n\n').filter(desc => desc.trim());
        log.success(`‚úÖ Loaded ${descriptions.length} task descriptions from file`);
      } else if (options.interactive) {
        // Interactive mode
        log.warn('Enter task descriptions. Type "done" to finish.\n');

        let done = false;
        while (!done) {
          let description;

          try {
            description = await editor({
              message: 'Describe the task (press Enter to open editor):',
              validate: (input) => {
                if (!input || input.trim() === '') {
                  return 'Description cannot be empty';
                }
                return true;
              }
            });
          } catch (error) {
            // Fallback to simple input if editor fails
            log.warn('Editor not available, using simple input mode');
            description = await input({
              message: 'Describe the task:',
              validate: (input) => {
                if (!input || input.trim() === '') {
                  return 'Description cannot be empty';
                }
                return true;
              }
            });
          }

          if (description.toLowerCase().trim() === 'done') {
            done = true;
          } else {
            descriptions.push(description);
            log.success(`‚úÖ Task ${descriptions.length} added`);

            const shouldContinue = await confirm({
              message: 'Add another task?',
              default: true
            });

            if (!shouldContinue) done = true;
          }
        }
      } else {
        // Single task mode from command line arguments
        const args = program.args.slice(1); // Skip 'describe' command
        if (args.length === 0) {
          log.warn('Please provide a task description or use --interactive mode');
          log.plain(chalk.gray('\nExamples:'));
          log.plain(chalk.gray('  nightly-code describe "Implement user authentication with email verification"'));
          log.plain(chalk.gray('  nightly-code describe --interactive'));
          log.plain(chalk.gray('  nightly-code describe --file tasks.txt'));
          process.exit(1);
        }
        descriptions = [args.join(' ')];
      }

      if (descriptions.length === 0) {
        log.warn('No task descriptions provided');
        process.exit(1);
      }

      // Call Claude to generate and save YAML directly
      const progress = spinner.createProgress([
        'Calling Claude to generate YAML'
      ]);

      // Build the prompt for Claude
      let prompt = `Generate a well-formatted nightly-tasks.yaml file for the following task descriptions.

Requirements:
- Convert each description into a properly structured task
- Automatically detect task type (feature, bugfix, refactor, test, docs, performance, security)
- Set appropriate priority (1-10) based on urgency keywords
- Generate meaningful task IDs
- Add relevant tags based on content
- Estimate duration in minutes
- Create clear acceptance criteria
- Split complex tasks into smaller subtasks if needed
- Output ONLY the YAML content, no explanations or markdown code blocks
- Format as valid YAML that can be saved directly to a file

`;

      if (options.append && await fs.pathExists(options.output)) {
        const existingContent = await fs.readFile(options.output, 'utf8');
        prompt += 'IMPORTANT: Append these new tasks to the existing file below, ' +
          `maintaining the same format and structure:\n\n${existingContent}\n\n`;
      }

      prompt += 'Task Descriptions:\n';
      descriptions.forEach((desc, index) => {
        prompt += `\n${index + 1}. ${desc}\n`;
      });

      prompt += `\nGenerate a complete, valid YAML file with proper structure. Include:
- version: '1.0'
- created_at: current timestamp
- tasks: array of task objects
- metadata: summary information

Each task should have: id, type, priority, title, requirements, acceptance_criteria, ` +
      'minimum_duration, dependencies, tags, files_to_modify, enabled\n\n' +
      'Output ONLY the YAML content, nothing else.';

      if (options.count) {
        const taskCount = parseInt(options.count);
        if (taskCount > 0) {
          prompt += `\n\nIMPORTANT: Generate exactly ${taskCount} tasks. ` +
            `If the descriptions are too simple, expand them into ${taskCount} detailed subtasks. ` +
            `If there are too many descriptions, intelligently combine or prioritize to create ${taskCount} tasks.`;
        }
      }

      progress.next();

      // Call Claude directly and save the output
      const { exec } = require('child_process');
      const util = require('util');
      const execPromise = util.promisify(exec);

      try {
        const outputPath = path.resolve(options.output);

        // Create temporary prompt file
        const tempPromptFile = path.join(os.tmpdir(), `nightly-describe-${Date.now()}.txt`);
        await fs.writeFile(tempPromptFile, prompt);

        // Call Claude and save output directly
        const claudeCommand = options.dryRun
          ? `claude < "${tempPromptFile}"`
          : `claude < "${tempPromptFile}" > "${outputPath}"`;

        const { stdout, stderr } = await execPromise(claudeCommand, {
          maxBuffer: 10 * 1024 * 1024 // 10MB buffer
        });

        // Clean up temp file
        try {
          await fs.unlink(tempPromptFile);
        } catch (e) {}

        if (stderr && !stderr.includes('Warning')) {
          log.warn(`Claude warnings: ${stderr}`);
        }

        progress.complete();

        if (options.dryRun) {
          log.info('\nüîç DRY RUN - Preview mode (no files written)');
          log.heading('\nGenerated YAML:');
          log.plain(chalk.gray('‚îÄ'.repeat(60)));
          log.plain(stdout);
          log.plain(chalk.gray('‚îÄ'.repeat(60)));
          log.info('\nTo save this output, run the command without --dry-run');
        } else {
          log.success(`\n‚úÖ Tasks written to ${options.output}`);
          log.info('\nRun the following command to view the generated tasks:');
          log.plain(chalk.gray(`  cat ${options.output}`));
          log.plain(chalk.gray('  # or'));
          log.plain(chalk.gray('  nightly-code validate'));
        }
      } catch (error) {
        progress.fail();
        if (error.message.includes('claude: command not found')) {
          log.error('Claude CLI not found. Please install it:');
          log.plain(chalk.gray('  npm install -g @anthropic-ai/claude-cli'));
        } else {
          log.errorWithDetail('Failed to generate tasks with Claude:', error);
        }
        process.exit(1);
      }
    } catch (error) {
      // Enhanced error handling
      if (error.message.includes('claude: command not found')) {
        log.error('Claude Code CLI not found. Please install it:');
        log.plain(chalk.gray('  npm install -g @anthropic-ai/claude-cli'));
      } else if (error.message.includes('YAML')) {
        log.error('Failed to parse Claude\'s response as valid YAML');
        log.plain(chalk.gray('Try running with --dry-run to see the raw output'));
      } else if (error.code === 'ENOENT') {
        log.error(`File not found: ${error.path}`);
      } else {
        log.errorWithDetail('‚ùå Task description failed:', error);
      }
      process.exit(1);
    }
  });

// Error handling
program.on('command:*', () => {
  log.error(`Invalid command: ${program.args.join(' ')}`);
  log.warn('See --help for available commands');
  process.exit(1);
});

// Global error handler
process.on('uncaughtException', (error) => {
  log.errorWithDetail('‚ùå Uncaught Exception:', error);
  process.exit(1);
});

process.on('unhandledRejection', (reason, promise) => {
  log.error(`‚ùå Unhandled Rejection at: ${promise}, reason: ${reason}`);
  process.exit(1);
});

program.parse();
