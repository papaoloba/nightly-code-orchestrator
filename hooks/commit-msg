#!/bin/bash
#
# Nightly Code Commit Message Convention Validator
# This hook validates commit messages against the Nightly Code convention
# for task completion tracking.
#
# Installation:
#   cp hooks/commit-msg .git/hooks/commit-msg
#   chmod +x .git/hooks/commit-msg

# ANSI color codes
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Get the commit message file
COMMIT_MSG_FILE=$1
COMMIT_MSG=$(cat "$COMMIT_MSG_FILE")

# Function to print colored output
print_error() {
    echo -e "${RED}[COMMIT-MSG HOOK ERROR]${NC} $1" >&2
}

print_warning() {
    echo -e "${YELLOW}[COMMIT-MSG HOOK WARNING]${NC} $1" >&2
}

print_success() {
    echo -e "${GREEN}[COMMIT-MSG HOOK]${NC} $1"
}

# Check if this is a task completion commit
if echo "$COMMIT_MSG" | grep -q '\[task:'; then
    # This appears to be a task completion commit
    print_success "Task completion commit detected"
    
    # Extract the first line (subject)
    SUBJECT=$(echo "$COMMIT_MSG" | head -n1)
    
    # Validate subject format: <type>(<scope>): <description> [task:<id>]
    if ! echo "$SUBJECT" | grep -qE '^(feat|fix|refactor|test|docs|chore|perf|style)(\([a-zA-Z0-9-]+\))?: .+ \[task:[a-zA-Z0-9-]+\]'; then
        print_error "Invalid task completion subject format!"
        echo ""
        echo "Expected format: <type>(<scope>): <description> [task:<task-id>]"
        echo "Example: feat(auth): implement user login [task:auth-001]"
        echo ""
        echo "Valid types: feat, fix, refactor, test, docs, chore, perf, style"
        exit 1
    fi
    
    # Check if this is marked as final commit (not a progress commit)
    if ! echo "$SUBJECT" | grep -q '\[[0-9]\+/[0-9]\+\]'; then
        # This is a final commit, check for required footer metadata
        if ! echo "$COMMIT_MSG" | grep -q 'Task-Status: completed'; then
            print_warning "Task completion commit missing 'Task-Status: completed' in footer"
            echo ""
            echo "For task completion, include these fields in the footer:"
            echo "  Task-ID: <task-id>"
            echo "  Task-Title: <full task title>"
            echo "  Task-Type: <feature|bugfix|refactor|test|docs>"
            echo "  Task-Status: completed"
            echo "  Task-Duration: <duration in seconds>"
            echo "  Task-Session: <session-id>"
            echo "  Task-Date: <ISO timestamp>"
            echo ""
            echo "Continue anyway? This may not properly track task completion. (y/n)"
            read -r response < /dev/tty
            if [ "$response" != "y" ]; then
                exit 1
            fi
        fi
    else
        print_success "Progress commit detected (multi-commit task)"
    fi
    
    # Extract task ID
    TASK_ID=$(echo "$SUBJECT" | grep -oE '\[task:[a-zA-Z0-9-]+\]' | sed 's/\[task://' | sed 's/\]//')
    print_success "Task ID: $TASK_ID"
    
    # Validate task ID format
    if ! echo "$TASK_ID" | grep -qE '^[a-zA-Z0-9-]+$'; then
        print_error "Invalid task ID format: $TASK_ID"
        echo "Task IDs should only contain letters, numbers, and hyphens"
        exit 1
    fi
fi

# General commit message validations

# Check subject line length (should be <= 72 characters)
SUBJECT_LENGTH=${#SUBJECT}
if [ $SUBJECT_LENGTH -gt 72 ]; then
    print_warning "Subject line is $SUBJECT_LENGTH characters (recommended: <= 72)"
fi

# Check for conventional commit format (even for non-task commits)
if ! echo "$SUBJECT" | grep -qE '^(feat|fix|refactor|test|docs|chore|perf|style|build|ci|revert)(\([a-zA-Z0-9-]+\))?:'; then
    print_warning "Commit doesn't follow conventional commit format"
    echo "Consider using format: <type>(<scope>): <description>"
    echo "Valid types: feat, fix, refactor, test, docs, chore, perf, style, build, ci, revert"
fi

# Check for empty commit message
if [ -z "$COMMIT_MSG" ]; then
    print_error "Empty commit message!"
    exit 1
fi

print_success "Commit message validation passed âœ“"
exit 0